Parser:
  Title: Network Session ASIM parser for Cisco ASA
  Version: '1.0'
  LastUpdated: August 03, 2022
Product:
  Name: CiscoASA
Normalization:
  Schema: NetworkSession
  Version: '0.2.4'
References:
  - Title: ASIM Network Session Schema
    Link: https://aka.ms/ASimNetworkSessionDoc
  - Title: ASIM
    Link: https://aka.ms/AboutASIM
  - Title: Message code Description in Cisco ASA 
    Link: https://aka.ms/ciscoasamessagecodes
Description: |
  This ASIM parser supports normalizing commonly used Cisco ASA messages collected using the CEF Data Connector to the ASIM Network Session normalized schema.
ParserName: ASimNetworkSessionCiscoASA
EquivalentBuiltInParser: _ASim_NetworkSession_CiscoASA
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
    let EventResultMapping = datatable (Reason:string, DeviceAction:string, EventResult:string, EventResultDetails:string, EventOriginalResultDetails:string)  [
        'Conn-timeout', '', 'Success', 'Timeout', 'The connection ended when a flow is closed because of the expiration of its inactivity timer.',
        'Deny Terminate', 'Deny', 'Failure', 'Terminated', 'Flow was terminated by application inspection.',
        'Failover primary closed', '', 'Success', 'Failover', 'The standby unit in a failover pair deleted a connection because of a message received from the active unit.',
        'FIN Timeout', '', 'Success', 'Timeout', 'Force termination after 10 minutes awaiting the last ACK or after half-closed timeout.',  
        'Flow closed by inspection', 'Deny', 'Failure', 'Terminated', 'Flow was terminated by the inspection feature.',
        'Flow terminated by IPS', 'Deny', 'Failure', 'Terminated', 'Flow was terminated by IPS.',
        'Flow reset by IPS', 'Reset', 'Failure', 'Terminated', 'Flow was reset by IPS.',     
        'Flow terminated by TCP Intercept', 'TCP Intercept', 'Failure', 'Terminated', 'Flow was terminated by TCP Intercept.',
        'Flow timed out', '', 'Success', 'Timeout', 'Flow has timed out.',
        'Flow timed out with reset', 'Reset', 'Failure', 'Timeout', 'Flow has timed out, but was reset.',
        'Free the flow created as result of packet injection', '', 'Success', 'Simulation', 'The connection was built because the packet tracer feature sent a simulated packet through the Secure Firewall ASA.',
        'Invalid SYN', '', 'Failure', 'Invalid TCP', 'The SYN packet was not valid.',
        'IPS fail-close', 'Deny', 'Failure', 'Terminated', 'Flow was terminated because the IPS card is down.',
        'No interfaces associated with zone', '', 'Failure', 'Routing issue', 'Flows were torn down after the "no nameif" or "no zone-member" leaves a zone with no interface members.',
        'No valid adjacency', 'Drop', 'Failure', 'Routing issue', 'This counter is incremented when the Secure Firewall ASA tried to obtain an adjacency and could not obtain the MAC address for the next hop. The packet is dropped.',
        'Pinhole Timeout', '', 'Failure', 'Timeout', 'The counter is incremented to report that the Secure Firewall ASA opened a secondary flow, but no packets passed through this flow within the timeout interval, and so it was removed. An example of a secondary flow is the FTP data channel that is created after successful negotiation on the FTP control channel.',
        'Probe maximum retries of retransmission exceeded', '', 'Failure', 'Maximum Retry', 'The connection was torn down because the TCP packet exceeded maximum probe retries of retransmission.',
        'Probe maximum retransmission time elapsed', '', 'Failure', 'Maximum Retry', 'The connection was torn down because the maximum probing time for TCP packet had elapsed.',
        'Probe received RST', '', 'Failure', 'Reset', 'The connection was torn down because probe connection received RST from server.',
        'Probe received FIN', '', 'Success', '', 'The connection was torn down because probe connection received FIN from server and complete FIN closure process was completed.',
        'Probe completed', '', 'Success', '', 'The probe connection was successful.', 
        'Route change', '', 'Success', '', 'When the Secure Firewall ASA adds a lower cost (better metric) route, packets arriving that match the new route cause their existing connection to be torn down after the user-configured timeout (floating-conn) value. Subsequent packets rebuild the connection out of the interface with the better metric. To prevent the addition of lower cost routes from affecting active flows, you can set the floating-conn configuration timeout value to 0:0:0.', 
        'SYN Control', '', 'Failure', 'Invalid TCP', 'A back channel initiation occurred from the wrong side.',
        'SYN Timeout', '', 'Failure', 'Timeout', 'Force termination after 30 seconds, awaiting three-way handshake completion.',
        'TCP bad retransmission', '', 'Success', 'Invalid TCP', 'The connection was terminated because of a bad TCP retransmission.',
        'TCP FINs', '', 'Success', '', 'A normal close-down sequence occurred.',
        'TCP Invalid SYN', '', 'Failure', 'Invalid TCP', 'Invalid TCP SYN packet.',              
        'TCP Reset-APPLIANCE', '', 'Failure', 'Reset', 'The flow is closed when a TCP reset is generated by the Secure Firewall ASA.',
        'TCP Reset-I', '', 'Failure', 'Reset', 'Reset was from the inside.',
        'TCP Reset-O', '', 'Failure', 'Reset', 'Reset was from the outside.',
        'TCP segment partial overlap', '', 'Failure', 'Invalid TCP', 'A partially overlapping segment was detected.',
        'TCP unexpected window size variation', '', 'Failure', 'Invalid TCP', 'A connection was terminated due to variation in the TCP window size.',  
        'Tunnel has been torn down', '', 'Failure', 'Invalid Tunnel', 'Flow was terminated because the tunnel is down.',
        'Unknown', 'Deny', 'Failure', 'Terminated', 'An authorization was denied by a URL filter.', 'Unauth Deny', '', 'Failure', 'Unknown', 'An unknown error has occurred.',               
        'Xlate Clear', '', '', '', 'A command line was removed.',              
    ];
    let ProtocolLookup=datatable(Protocol:string,NetworkProtocol:string)[
          "0","HOPOPT"
          , "1","ICMP"
          , "2","IGMP"
          , "3","GGP"
          , "4","IPv4"
          , "5","ST"
          , "6","TCP"
          , "7","CBT"
          , "8","EGP"
          , "9","IGP"
          , "10","BBN-RCC-MON"
          , "11","NVP-II"
          , "12","PUP"
          , "13","ARGUS (deprecated)"
          , "14","EMCON"
          , "15","XNET"
          , "16","CHAOS"
          , "17","UDP"
          , "18","MUX"
          , "19","DCN-MEAS"
          , "20","HMP"
          , "21","PRM"
          , "22","XNS-IDP"
          , "23","TRUNK-1"
          , "24","TRUNK-2"
          , "25","LEAF-1"
          , "26","LEAF-2"
          , "27","RDP"
          , "28","IRTP"
          , "29","ISO-TP4"
          , "30","NETBLT"
          , "31","MFE-NSP"
          , "32","MERIT-INP"
          , "33","DCCP"
          , "34","3PC"
          , "35","IDPR"
          , "36","XTP"
          , "37","DDP"
          , "38","IDPR-CMTP"
          , "39","TP++"
          , "40","IL"
          , "41","IPv6"
          , "42","SDRP"
          , "43","IPv6-Route"
          , "44","IPv6-Frag"
          , "45","IDRP"
          , "46","RSVP"
          , "47","GRE"
          , "48","DSR"
          , "49","BNA"
          , "50","ESP"
          , "51","AH"
          , "52","I-NLSP"
          , "53","SWIPE (deprecated)"
          , "54","NARP"
          , "55","MOBILE"
          , "56","TLSP"
          , "57","SKIP"
          , "58","IPv6-ICMP"
          , "59","IPv6-NoNxt"
          , "60","IPv6-Opts"
          , "61",""
          , "62","CFTP"
          , "63",""
          , "64","SAT-EXPAK"
          , "65","KRYPTOLAN"
          , "66","RVD"
          , "67","IPPC"
          , "68",""
          , "69","SAT-MON"
          , "70","VISA"
          , "71","IPCV"
          , "72","CPNX"
          , "73","CPHB"
          , "74","WSN"
          , "75","PVP"
          , "76","BR-SAT-MON"
          , "77","SUN-ND"
          , "78","WB-MON"
          , "79","WB-EXPAK"
          , "80","ISO-IP"
          , "81","VMTP"
          , "82","SECURE-VMTP"
          , "83","VINES"
          , "84","TTP"
          , "84","IPTM"
          , "85","NSFNET-IGP"
          , "86","DGP"
          , "87","TCF"
          , "88","EIGRP"
          , "89","OSPFIGP"
          , "90","Sprite-RPC"
          , "91","LARP"
          , "92","MTP"
          , "93","AX.25"
          , "94","IPIP"
          , "95","MICP (deprecated)"
          , "96","SCC-SP"
          , "97","ETHERIP"
          , "98","ENCAP"
          , "99",""
          , "100","GMTP"
          , "101","IFMP"
          , "102","PNNI"
          , "103","PIM"
          , "104","ARIS"
          , "105","SCPS"
          , "106","QNX"
          , "107","A/N"
          , "108","IPComp"
          , "109","SNP"
          , "110","Compaq-Peer"
          , "111","IPX-in-IP"
          , "112","VRRP"
          , "113","PGM"
          , "114",""
          , "115","L2TP"
          , "116","DDX"
          , "117","IATP"
          , "118","STP"
          , "119","SRP"
          , "120","UTI"
          , "121","SMP"
          , "122","SM (deprecated)"
          , "123","PTP"
          , "124","ISIS over IPv4"
          , "125","FIRE"
          , "126","CRTP"
          , "127","CRUDP"
          , "128","SSCOPMCE"
          , "129","IPLT"
          , "130","SPS"
          , "131","PIPE"
          , "132","SCTP"
          , "133","FC"
          , "134","RSVP-E2E-IGNORE"
          , "135","Mobility Header"
          , "136","UDPLite"
          , "137","MPLS-in-IP"
          , "138","manet"
          , "139","HIP"
          , "140","Shim6"
          , "141","WESP"
          , "142","ROHC"
          , "143","Ethernet"
          , "253",""
          , "254",""
          , "255","Reserved"
      ];
      let NWParser=(disabled:bool=false){
      let allLogs = CommonSecurityLog
                | where not(disabled)
                | where DeviceVendor == "Cisco" and DeviceProduct == "ASA"
                | where DeviceEventClassID in ("106001","106006","106015","106016","106021","106022","106010","106014","106018","106023","302013","302015","302014","302016","302020","302021","710002","710003","710004","710005","106007","106017","106100","106002","106012","106013","106020");
      let parsedData = allLogs
                | where isnotempty(SourceIP)
                | project-rename AliasDeviceEventClassID = DeviceEventClassID,
                                 AliasDeviceVersion = DeviceVersion,
                                 AliasDeviceAction = DeviceAction,
                                 NetworkRuleName = DeviceCustomString2,
                                 SrcIpAddr = SourceIP,
                                 SrcPortNumber = SourcePort,
                                 DstIpAddr = DestinationIP, 
                                 DstPortNumber = DestinationPort
                | project-away Activity, AdditionalExtensions, ApplicationProtocol, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, Process*, ReceiptTime, ReceivedBytes, Remote*, Report*, Request*, Source*, SentBytes, StartTime, TenantId, Threat*;
      let unparsedData = allLogs
                | where isempty(SourceIP)
                | project-rename AliasDeviceEventClassID = DeviceEventClassID
                | project-away Activity, AdditionalExtensions, ApplicationProtocol, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, Process*, ReceiptTime, ReceivedBytes, Remote*, Report*, Request*, Source*, SentBytes, StartTime, TenantId, Threat*;
      let all_106001_alike = parsedData
                | where AliasDeviceEventClassID in ("106001", "106006", "106015", "106016", "106021", "106022") 
                | parse Message with * " interface " DstInterfaceName;
      let all_106010_alike = parsedData
                | where AliasDeviceEventClassID in ("106010", "106014")
                | parse Message with * " src "  SrcInterfaceName ":" * " dst " DstInterfaceName ":" * "(type " NetworkIcmpType ", code " NetworkIcmpCode:int ")";
      let all_106018 = parsedData
                | where AliasDeviceEventClassID == "106018"
                | parse Message with * " packet type " NetworkIcmpType " " * "list " NetworkRuleName " " *;
      let all_106023 = parsedData
                | where AliasDeviceEventClassID == "106023" and not(Message has "protocol 41")
                | parse Message with * " src "  SrcInterfaceName ":" * " dst " DstInterfaceName ":" * ' by access-group "' NetworkRuleName '" '  *
                | parse Message with * "(type " NetworkIcmpType ", code " NetworkIcmpCode:int ")" *;
      let all_106023_unparsed = unparsedData
                | where AliasDeviceEventClassID == "106023" and not(Message has "protocol 41")
                | parse Message with * ":" DeviceAction " " Protocol " src " SrcInterfaceName ":" SrcIpAddrAndPort "(" SrcUsername ") dst " DstInterfaceName ":" DstIpAddrAndPort " " NetworkIcmpInfo 'by access-group "' NetworkRuleName '" [' * "]"
                | parse NetworkIcmpInfo with "(type " NetworkIcmpType ", code " NetworkIcmpCode:int ") "
                | extend SrcIpAddrAndPort = split(SrcIpAddrAndPort,"/"), DstIpAddrAndPort = split(DstIpAddrAndPort,"/")
                | extend SrcIpAddr = tostring(SrcIpAddrAndPort[0]),
                        SrcPortNumber = toint(SrcIpAddrAndPort[1]),
                        DstIpAddr = tostring(DstIpAddrAndPort[0]),
                        DstPortNumber = toint(DstIpAddrAndPort[1]),
                        DeviceAction = trim_start(@"\s+",DeviceAction)
                | extend 
                        SimplifiedDeviceAction = iff(isempty(SimplifiedDeviceAction), 
                                                        DeviceAction, 
                                                        SimplifiedDeviceAction)
                | project-away SrcIpAddrAndPort, DstIpAddrAndPort, NetworkIcmpInfo;
      let all_106023_41 = union parsedData, unparsedData
                | where AliasDeviceEventClassID == "106023" and Message has "protocol 41"
                | parse Message with * ":" Action " " ProtocolFromLog " src " SrcInterfaceName ":" SrcIpAddr " dst " DstInterfaceName ":" DstIpAddr ' by access-group ' NetworkRuleName ' '  *
                | parse Message with * "(type " NetworkIcmpType ", code " NetworkIcmpCode:int ")" *
                | extend Protocol = case(isnotempty(Protocol), Protocol,
                                        ProtocolFromLog endswith "41", "41",
                                        ""),
                        NetworkRuleName = trim_start(@"\s*",NetworkRuleName),
                        DeviceAction = trim_start(@"\s*",Action),
                        SimplifiedDeviceAction = trim_start(@"\s*",Action)
                | project-away ProtocolFromLog, Action;
      let all_302013_302015_parsed = parsedData
                | where AliasDeviceEventClassID in ("302013","302015")
                | parse Message with * ":" * " " * " " * " connection " NetworkSessionId " for " SrcInterfaceName ":" * "/" * " (" SrcNatIpAddr "/" SrcNatPortNumber:int ")" SrcUsername "to " DstInterfaceName ":" * "/" * " (" DstNatIpAddr "/" DstNatPortNumber:int ")" DstUsername
                | extend SrcUsername = trim(@"\s?\(?\)?\s?", SrcUsername),
                        DstUsername = trim(@"\s?\(?\)?\s?", DstUsername)
                | extend 
                        SimplifiedDeviceAction = AliasDeviceAction,
                        SessionId = NetworkSessionId;
      let all_302013_302015_unparsed = unparsedData
                | where AliasDeviceEventClassID in ("302013","302015")
                | parse Message with * ":" DeviceAction " " NetworkDirection " " Protocol " connection " NetworkSessionId " for " SrcInterfaceName ":" SrcIpAddr "/" SrcPortNumber:int " (" SrcNatIpAddr "/" SrcNatPortNumber:int ")" SrcUsername "to " DstInterfaceName ":" DstIpAddr "/" DstPortNumber:int " (" DstNatIpAddr "/" DstNatPortNumber:int ")" DstUsername
                | extend SrcUsername = trim(@"\s?\(?\)?\s?", SrcUsername),
                        DstUsername = trim(@"\s?\(?\)?\s?", DstUsername),
                        NetworkDirection = case(NetworkDirection == "inbound", "Inbound",
                                                    NetworkDirection == "outbound", "Outbound",
                                                    ""),
                        DeviceAction = trim_start(@"\s*",DeviceAction)
                | extend 
                        SimplifiedDeviceAction = DeviceAction,
                        SessionId = NetworkSessionId;
      let all_302014_unparsed = unparsedData
                | where AliasDeviceEventClassID == "302014"
                | parse Message with * ":" DeviceAction " " Protocol " connection " NetworkSessionId " for " SrcInfoString " to " DstInfoString " duration " NetworkDuration " bytes " DstBytes:long *
                | parse kind=regex SrcInfoString with SrcInterfaceName ":" SrcIpAddr "/" SrcPortNumber:int @"\(?\s?" SrcUsername @"\)?\s?"
                | parse kind=regex DstInfoString with DstInterfaceName ":" DstIpAddr "/" DstPortNumber:int @"\(?\s?" DstUsername @"\)?\s?"
                | parse Message with * " bytes " * " " RemainingString
                | parse RemainingString with ReasonString "(" DstUsernameSimple ")"
                | extend ReasonString = case(RemainingString has "from" and RemainingString !has "(", RemainingString,
                                             ReasonString)
                | parse ReasonString with Reason " from " *
                | extend Reason = case(isempty(Reason), ReasonString,
                                       Reason),
                        DeviceAction = trim_start(@"\s*",DeviceAction)
                | lookup EventResultMapping on Reason
                | extend 
                            SrcUsername = trim(@"\s?\(?\)?\s?", SrcUsername),
                            DstUsername = case(isempty(DstUsername),DstUsernameSimple,
                                               trim(@"\s?\(?\)?\s?", DstUsername)),
                            NetworkDuration = toint(24 * 60 * totimespan(NetworkDuration) / time(1s)),
                            SimplifiedDeviceAction = iff(isempty(SimplifiedDeviceAction), 
                                                            DeviceAction, 
                                                            SimplifiedDeviceAction),
                            SessionId = NetworkSessionId,
                            EventOriginalResultDetails = iif(isnotempty(EventOriginalResultDetails), strcat(Reason, " - ", EventOriginalResultDetails), EventOriginalResultDetails)
                | project-away DstUsernameSimple, *String, Reason;
      let all_302014_parsed = parsedData
                | where AliasDeviceEventClassID == "302014"
                | parse Message with * " connection " NetworkSessionId " for " SrcInterfaceName ":" * " to " DstInterfaceName ":" * " duration " NetworkDuration " bytes " DstBytes:long *
                | parse Message with * " bytes " * " " ReasonString
                | parse ReasonString with Reason " from " *
                | extend Reason = case(isempty(Reason), ReasonString,
                                       Reason)
                | lookup EventResultMapping on Reason
                | extend 
                            NetworkDuration = toint(24 * 60 * totimespan(NetworkDuration) / time(1s)),
                            SessionId = NetworkSessionId,
                            EventOriginalResultDetails = iif(isnotempty(EventOriginalResultDetails), strcat(Reason, " - ", EventOriginalResultDetails), EventOriginalResultDetails)
                | project-away Reason, ReasonString;
      let all_302016_parsed = parsedData
                | where AliasDeviceEventClassID  == "302016"
                | parse Message with * " connection " NetworkSessionId " for " SrcInterfaceName ":" * " to " DstInterfaceName ":" * " duration " NetworkDuration " bytes " DstBytes:long *
                | extend NetworkDuration = toint(24 * 60 * totimespan(NetworkDuration) / time(1s)),
                         SessionId = NetworkSessionId;
      let all_302016_unparsed = unparsedData
                | where AliasDeviceEventClassID  == "302016"
                | parse Message with * ":" DeviceAction " " Protocol " connection " NetworkSessionId " for " SrcInfoString " to " DstInfoString " duration " NetworkDuration " bytes " DstBytes:long *
                | parse kind=regex SrcInfoString with SrcInterfaceName ":" SrcIpAddr "/" SrcPortNumber:int @"\(?\s?" SrcUsername @"\)?\s?"
                | parse kind=regex DstInfoString with DstInterfaceName ":" DstIpAddr "/" DstPortNumber:int @"\(?\s?" DstUsername @"\)?\s?"
                | parse Message with * " bytes " * " (" DstUsernameSimple ")"
                | extend DeviceAction = trim_start(@"\s+",DeviceAction)
                | extend 
                            SrcUsername = trim(@"\s?\(?\)?\s?", SrcUsername),
                            DstUsername = case(isempty(DstUsername),DstUsernameSimple,
                                               trim(@"\s?\(?\)?\s?", DstUsername)),
                            NetworkDuration = toint(24 * 60 * totimespan(NetworkDuration) / time(1s)),
                            SimplifiedDeviceAction = iff(isempty(SimplifiedDeviceAction), DeviceAction, SimplifiedDeviceAction),
                            SessionId = NetworkSessionId
                | project-away DstUsernameSimple, *InfoString;
      let all_302020_302021 = parsedData
                | where AliasDeviceEventClassID in ("302020","302021")
                | parse Message with * "(" SrcUsername ")" *
                | parse Message with * "type " NetworkIcmpType " code " NetworkIcmpCode:int *
                | extend SrcUsernameType = iif(isnotempty(SrcUsername),"Windows","");
      let all_7_series = parsedData
                | where AliasDeviceEventClassID in ("710002","710003","710004","710005")
                | parse Message with * " to " DstInterfaceName ":" *;
      let all_106007 = parsedData
                | where AliasDeviceEventClassID == "106007"
                | parse Message with * " due to " EventOriginalResultDetails;
      let all_106017 = parsedData
                | where AliasDeviceEventClassID == "106017"
                | extend EventOriginalResultDetails = "Land Attack";
      let all_106100_parsed = parsedData
                | where AliasDeviceEventClassID == "106100" and isnotempty(SrcIpAddr)
                | parse Message with * "access-list " * " " * " " * " " SrcInterfaceName "/" * ") -> " DstInterfaceName "/" * ") hit-cnt " EventCount:int *;
      let all_106100_unparsed = unparsedData
                | where AliasDeviceEventClassID == "106100"
                | parse Message with * "access-list " NetworkRuleName " " DeviceAction " " Protocol " " SrcInterfaceName "/" SrcIpAddr "(" SrcPortNumber:int ") -> " DstInterfaceName "/" DstIpAddr "(" DstPortNumber:int ") hit-cnt " EventCount:int * 
                | extend SimplifiedDeviceAction = case(DeviceAction == "denied", "Deny",
                                                        "Allow");
      let remainingLogs = parsedData
                | where AliasDeviceEventClassID in ("106002", "106012", "106013", "106020");
      let networkaddressWatchlistData = materialize (_ASIM_GetWatchlistRaw("NetworkAddresses"));
      let internalInterface = networkaddressWatchlistData | where WatchlistItem.Tags has "Internal" | distinct tostring(WatchlistItem["Range Name"]);
      let externalInterface = networkaddressWatchlistData | where WatchlistItem.Tags has "External" | distinct tostring(WatchlistItem["Range Name"]);
      union isfuzzy=false all_106001_alike, all_106010_alike, all_106018, all_106023, all_106023_unparsed, all_106023_41,  all_302013_302015_unparsed, all_302013_302015_parsed, all_302014_parsed, all_302014_unparsed, all_302016_parsed, all_302016_unparsed, all_302020_302021, all_7_series, all_106007, all_106017, all_106100_parsed, all_106100_unparsed, remainingLogs
                | extend SimplifiedDeviceAction = trim(@"\s",SimplifiedDeviceAction)
                | extend 
                        EventStartTime = TimeGenerated,
                        EventEndTime = TimeGenerated,
                        EventVendor = "Cisco",
                        EventProduct = "ASA",
                        EventCount = coalesce(EventCount,toint(1)),
                        EventType = "NetworkSession",
                        EventSchema = "NetworkSession",
                        EventSchemaVersion = "0.2.4",
                        DvcAction = case(SimplifiedDeviceAction has_any ("Teardown","Built"), "",
                                        SimplifiedDeviceAction),
                        SrcInterfaceName = tolower(SrcInterfaceName),
                        DstInterfaceName = tolower(SrcInterfaceName)
                | extend 
                        EventResult = case(isnotempty(EventResult), EventResult,
                                            DvcAction == "Allow", "Success",
                                            "Failure"),
                        SrcUsernameType = case(isnotempty(SrcUsername) and SrcUsername has "@", "UPN",
                                               isnotempty(SrcUsername) and SrcUsername !has "@" and SrcUsername has "\\", "Windows",
                                               isnotempty(SrcUsername), "Simple",
                                               ""),
                        DstUsernameType = case(isnotempty(DstUsername) and DstUsername has "@", "UPN",
                                               isnotempty(DstUsername) and DstUsername !has "@" and DstUsername has "\\", "Windows",
                                               isnotempty(DstUsername), "Simple",
                                               "")
                | lookup ProtocolLookup on Protocol
                | project-rename 
                        EventProductVersion = AliasDeviceVersion,
                        EventOriginalType = AliasDeviceEventClassID,
                        EventOriginalSeverity = OriginalLogSeverity,
                        DvcOriginalAction = DeviceAction,
                        EventMessage = Message,
                        Dvc = Computer
                | extend
                        EventSeverity = iff(isempty(EventResult) or EventResult == "Success", "Informational", "Low"),
                        NetworkDirection = case(isnotempty(CommunicationDirection), CommunicationDirection,
                                    SrcInterfaceName in (internalInterface) and DstInterfaceName in (internalInterface), "Local",
                                    SrcInterfaceName in (externalInterface) and DstInterfaceName in (externalInterface), "External",
                                    DstInterfaceName in (externalInterface), "Outbound",
                                    SrcInterfaceName in (externalInterface), "Inbound",
                                    ""),
                        NetworkProtocol = case(isempty(NetworkProtocol) and isnotempty(Protocol), toupper(Protocol),
                                                NetworkProtocol)
                | extend 
                        Src = SrcIpAddr,
                        Dst = DstIpAddr,
                        Duration = NetworkDuration,
                        IpAddr = SrcIpAddr,
                        Rule = NetworkRuleName,
                        User = DstUsername
                | project-away CommunicationDirection, Alias*, Device*, LogSeverity, Protocol, SimplifiedDeviceAction
                };
      NWParser(disabled=disabled)